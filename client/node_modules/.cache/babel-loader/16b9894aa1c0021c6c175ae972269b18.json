{"ast":null,"code":"/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nrequire('./vendor/polyfills');\n\nvar util = require('./util');\n\nvar tx = require('./tx');\n\nvar session = require('./session');\n\nvar cookies = require('./cookies');\n\nvar token = require('./token');\n\nvar AuthSdkError = require('./errors/AuthSdkError');\n\nvar config = require('./config');\n\nvar TokenManager = require('./TokenManager');\n\nfunction OktaAuthBuilder(args) {\n  var sdk = this;\n\n  if (!args) {\n    throw new AuthSdkError('No arguments passed to constructor. ' + 'Required usage: new OktaAuth(args)');\n  }\n\n  if (!args.url) {\n    throw new AuthSdkError('No url passed to constructor. ' + 'Required usage: new OktaAuth({url: \"https://sample.okta.com\"})');\n  }\n\n  this.options = {\n    url: util.removeTrailingSlash(args.url),\n    clientId: args.clientId,\n    issuer: util.removeTrailingSlash(args.issuer),\n    authorizeUrl: util.removeTrailingSlash(args.authorizeUrl),\n    userinfoUrl: util.removeTrailingSlash(args.userinfoUrl),\n    redirectUri: args.redirectUri,\n    ajaxRequest: args.ajaxRequest,\n    transformErrorXHR: args.transformErrorXHR,\n    headers: args.headers\n  }; // Digital clocks will drift over time, so the server\n  // can misalign with the time reported by the browser.\n  // The maxClockSkew allows relaxing the time-based\n  // validation of tokens (in seconds, not milliseconds).\n  // It currently defaults to 300, because 5 min is the\n  // default maximum tolerance allowed by Kerberos.\n  // (https://technet.microsoft.com/en-us/library/cc976357.aspx)\n\n  if (!args.maxClockSkew && args.maxClockSkew !== 0) {\n    this.options.maxClockSkew = config.DEFAULT_MAX_CLOCK_SKEW;\n  } else {\n    this.options.maxClockSkew = args.maxClockSkew;\n  }\n\n  sdk.session = {\n    close: util.bind(session.closeSession, null, sdk),\n    exists: util.bind(session.sessionExists, null, sdk),\n    get: util.bind(session.getSession, null, sdk),\n    refresh: util.bind(session.refreshSession, null, sdk),\n    setCookieAndRedirect: util.bind(session.setCookieAndRedirect, null, sdk)\n  };\n  sdk.tx = {\n    status: util.bind(tx.transactionStatus, null, sdk),\n    resume: util.bind(tx.resumeTransaction, null, sdk),\n    exists: util.bind(tx.transactionExists, null, sdk)\n  }; // This is exposed so we can mock document.cookie in our tests\n\n  sdk.tx.exists._getCookie = function (name) {\n    return cookies.getCookie(name);\n  };\n\n  sdk.idToken = {\n    authorize: util.deprecateWrap('Use token.getWithoutPrompt, token.getWithPopup, or token.getWithRedirect ' + 'instead of idToken.authorize.', util.bind(token.getToken, null, sdk)),\n    verify: util.deprecateWrap('Use token.verify instead of idToken.verify', util.bind(token.verifyIdToken, null, sdk)),\n    refresh: util.deprecateWrap('Use token.refresh instead of idToken.refresh', util.bind(token.refreshIdToken, null, sdk)),\n    decode: util.deprecateWrap('Use token.decode instead of idToken.decode', token.decodeToken)\n  }; // This is exposed so we can mock window.location.href in our tests\n\n  sdk.idToken.authorize._getLocationHref = function () {\n    return window.location.href;\n  };\n\n  sdk.token = {\n    getWithoutPrompt: util.bind(token.getWithoutPrompt, null, sdk),\n    getWithPopup: util.bind(token.getWithPopup, null, sdk),\n    getWithRedirect: util.bind(token.getWithRedirect, null, sdk),\n    parseFromUrl: util.bind(token.parseFromUrl, null, sdk),\n    decode: token.decodeToken,\n    refresh: util.bind(token.refreshToken, null, sdk),\n    getUserInfo: util.bind(token.getUserInfo, null, sdk),\n    verify: util.bind(token.verifyToken, null, sdk)\n  }; // This is exposed so we can set window.location in our tests\n\n  sdk.token.getWithRedirect._setLocation = function (url) {\n    window.location = url;\n  }; // This is exposed so we can mock window.location.hash in our tests\n\n\n  sdk.token.parseFromUrl._getLocationHash = function (url) {\n    return window.location.hash;\n  };\n\n  sdk.tokenManager = new TokenManager(sdk, args.tokenManager);\n}\n\nvar proto = OktaAuthBuilder.prototype;\nproto.features = {};\n\nproto.features.isPopupPostMessageSupported = function () {\n  var isIE8or9 = document.documentMode && document.documentMode < 10;\n\n  if (window.postMessage && !isIE8or9) {\n    return true;\n  }\n\n  return false;\n};\n\nproto.features.isTokenVerifySupported = function () {\n  return typeof crypto !== 'undefined' && crypto.subtle && typeof Uint8Array !== 'undefined';\n}; // { username, password, (relayState), (context) }\n\n\nproto.signIn = function (opts) {\n  return tx.postToTransaction(this, '/api/v1/authn', opts);\n};\n\nproto.signOut = function () {\n  return this.session.close();\n}; // { username, (relayState) }\n\n\nproto.forgotPassword = function (opts) {\n  return tx.postToTransaction(this, '/api/v1/authn/recovery/password', opts);\n}; // { username, (relayState) }\n\n\nproto.unlockAccount = function (opts) {\n  return tx.postToTransaction(this, '/api/v1/authn/recovery/unlock', opts);\n}; // { recoveryToken }\n\n\nproto.verifyRecoveryToken = function (opts) {\n  return tx.postToTransaction(this, '/api/v1/authn/recovery/token', opts);\n};\n\nmodule.exports = function (ajaxRequest) {\n  function OktaAuth(args) {\n    if (!(this instanceof OktaAuth)) {\n      return new OktaAuth(args);\n    }\n\n    if (args && !args.ajaxRequest) {\n      args.ajaxRequest = ajaxRequest;\n    }\n\n    util.bind(OktaAuthBuilder, this)(args);\n  }\n\n  OktaAuth.prototype = OktaAuthBuilder.prototype;\n  OktaAuth.prototype.constructor = OktaAuth;\n  return OktaAuth;\n};","map":null,"metadata":{},"sourceType":"script"}